string[,] table = new string[2,5];
// Инициализация через constant
// String.Empty
// table[0,0]   table[0,1]  table[0,2]  table[0,3]
// table[1,0]   table[1,1]  table[1,2]  table[1,3]
/*
// Для обращения указываем индекс
table[1, 2]="слово";
// rows - название счетчика по строкам
for (int rows = 0; rows < 2; rows++)
// Внутренний счетчик по столбцам - columns
{
 for (int columns = 0; columns < 5; columns++)
 // Распечатывание массива через интерполяцию
 {
 Console.WriteLine($"-{table[rows, columns]}-");
 }
}
*/
/*
int[,] matrix = new int[3, 4];
// Внешний цыкл щелкающий строки
for (int i = 0; i < 3; i++)
{
//Внутренний цыкл щёлкающий столбцы
    for (int j = 0; j < 4; j++)
    {
        Console.WriteLine($"{matrix[i, j]} ");
    }
Console.WriteLine();
}
*/
/*
int[,] matrix = new int[3, 4];
for (int i = 0; i < 3; i++)
{
 for (int j = 0; j < 4; j++)
 {
 Console.Write($"{matrix[i, j]} ");
 }
Console.WriteLine();
}
*/

/*
// замена конкретных размерностей по строкам  
// и столбцам на длины обобщенные
int[,] matrix = new int[3, 4];
// Замена известного количества строк на строку
// matrix.GetLength(0)
for (int i = 0; i < matrix.GetLength(0); i++)
{
 // Замена известного количества столбцов на строку
// matrix.GetLength(1)
 for (int j = 0; j < matrix.GetLength(1); j++)
 {
 Console.Write($"{matrix[i, j]} ");
 }
Console.WriteLine();
}
*/

// Теперь попробуем воспользоваться знаниями с предыдущих лекций и опишем метод, который будет 
//отдельно печатать двумерную матрицу на экран и заполнять её числами.
/*
void PrintArray(int[,] matr)
{
 for (int i = 0; i < matr.GetLength(0); i++)
 {
 for (int j = 0; j < matr.GetLength(1); j++)
 {
 Console.Write($"{matr[i, j]} ");
 }
 Console.WriteLine();
 }
}
// Метод для заполнения матрицы случайными числами
void FillArray(int[,] matr)
{
 for (int i = 0; i < matr.GetLength(0); i++)
 {
 for (int j = 0; j < matr.GetLength(1); j++)
 {
 matr[i,j] = new Random().Next(1,10);//[1; 10)
 }
 }
}
int[,] matrix = new int[3, 4];
PrintArray(matrix);
FillArray(matrix);
Console.WriteLine();
PrintArray(matrix);
*/

int[,] pic = new int[,] 
{ 
{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, 
{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, 
{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, 
{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, 
{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, 
{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, 
{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, 
{0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, 
{0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, 
{0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0 }, 
{0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 }, 
{0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 }, 
{0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0 }, 
{0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 }, 
{0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 }, 
{0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0 }, 
{0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0 }, 
{0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0 }, 
{0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0 }, 
{0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0 }, 
{0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0 }, 
{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0 }, 
{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
};

void PrintImage(int[,] image)
{
 for (int i = 0; i < image.GetLength(0); i++)
 {
 for (int j = 0; j < image.GetLength(1); j++)
 {
 if(image[i,j] == 0) Console.Write($" ");
 else Console.Write($"+");
 }
 Console.WriteLine();
 }
}
PrintImage(pic);

void FillImage(int row, int col)
{
 if (pic[row, col] == 0)// Если не закрашен 
 {
// То красим, описывая метод проверки
 pic[row, col] = 1;
 FillImage(row - 1, col);
 FillImage(row, col - 1);
 FillImage(row + 1, col);
 FillImage(row, col + 1);
 }
}
PrintImage(pic);
FillImage(13, 13);
PrintImage(pic);
